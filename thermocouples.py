# Implementar as equações para os termopares disponíveis 
# na faixa de 0 a 300 C
# Plotar um gráfico mV vs Temperatura para todos estes tipos

#import matplotlib as plt
#import numpy as np
from math import pow
from matplotlib import pyplot

#plt.style.use('_mpl-gallery')

def thermocouple_typeB (): 
    temperature = 0
    coefficient_B = [ 0.000000000000*pow(10,0), -0.246508183460*pow(10,-3), 
                      0.590404211710*pow(10,-5), -0.132579316360*pow(10,-8),
                      0.156682919010*pow(10,-11), -0.169445292400*pow(10,-14),
                      0.629903470940*pow(10,-14) ]
    
    #while temperature <= 300:
        

def thermocouple_typeE ():
    coefficient_E = [ 0.000000000000*pow(10,0), 0.586655087100*pow(10,-1),
                      0.450322755820*pow(10,-4), 0.289084072120*pow(10,-7),
                     -0.330568966520*pow(10,-9), 0.650244032700*pow(10,-12),
                     -0.191974955040*pow(10,-15), -0.125366004970*pow(10,-17),
                      0.214892175690*pow(10,-20), -0.143880417820*pow(10,-23),
                      0.359608994810*pow(10.-27) ]                   

def thermocouple_typeJ ():
    coefficient_J = [ 0.503811878150*pow(10,-1), 0.304758369300*pow(10,-4),
                     -0.856810657200*pow(10,-7), 0.132281952950*pow(10,-9),
                     -0.170529583370*pow(10,-12), 0.209480906970*pow(10,-15),
                     -0.125383953360*pow(10,-18), 0.156317256970*pow(10,-22) ]

def thermocouple_typeK ():
    coefficient_K = [-0.176004136860*pow(10,-1), 0.389212049750*pow(10,-1),
                      0.185587700320*pow(10,-4), -0.994575928740*pow(10,-7),
                      0.318409457190*pow(10,-9), -0.560728448890*pow(10,-12),
                      0.560750590590*pow(10,-15), -0.320207200030*pow(10,-18),
                      0.971511471520*pow(10,-22), -0.121047212750*pow(10,-25) ]
    
    thermoelectric_voltage = [0.118597600000*pow(10,0), -0.118343200000*pow(10,-3),
                              0.126968600000*pow(10,3)]

def thermocouple_typeN ():
    coefficient_N = [0.000000000000	*pow(10,0), 0.259293946010*pow(10,-1), 
                     0.157101418800*pow(10,-4), 0.438256272370*pow(10,-7), 
                     -0.252611697940*pow(10,-9), 0.643118193390*pow(10,-12), 
                     -0.100634715190*pow(10,-14), 0.997453389920*pow(10,-18), 
                     -0.608632456070*pow(10,-21), 0.208492293390*pow(10,-24), 
                     -0.306821961510*pow(10,-28)]

def thermocouple_typeR ():
    coefficient_R = [0.000000000000*pow(10,0), 0.528961729765*pow(10,-2), 
                     0.139166589782*pow(10,-4), -0.238855693017*pow(10,-7), 
                     0.356916001063*pow(10,-10), -0.462347666298*pow(10,-13), 
                     0.500777441034*pow(10,-16), -0.373105886191*pow(10,-19),
                     0.157716482367*pow(10,-22), -0.281038625251*pow(10,-26)]

def thermocouple_typeS ():
    coefficient_S = [0.000000000000*pow(10,0), 0.540313308631*pow(10,-2),
                     0.125934289740*pow(10,-4), -0.232477968689*pow(10,-7),
                     0.322028823036*pow(10,-10), -0.331465196389*pow(10,-13),
                     0.255744251786*pow(10,-16), -0.125068871393*pow(10,-19),
                     0.271443176145*pow(10,-23) ]

def thermocouple_typeT ():
    coefficient_T = [0.387481063640*pow(10,-1), 0.332922278800*pow(10,-4),
                     0.206182434040*pow(10,-6), -0.218822568460*pow(10,-8),
                     0.109968809280*pow(10,-10), 0.308157587720*pow(10,-13),
                     0.454791352900*pow(10,-16), -0.275129016730*pow(10,-19)]

def main():
    print('ble')

main()